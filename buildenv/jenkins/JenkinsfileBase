#!groovy
/* template jenkinsfile for adoptopenjdk test builds*/
def getBuildList() {
	def TESTPROJECTS = [system:'systemtest', perf:'performance', jck:'jck', external:'thirdparty_containers', openjdk:'openjdk_regression', jdk:'openjdk_regression', runtest:'', sanity:'', extended:'']
	String fullTarget="${TARGET}"
	String[] levelTargets = fullTarget.split('\\.')
	String groupTarget = levelTargets[-1]
	String[] partsTarget = groupTarget.split('_|-')
	String simpleTarget = partsTarget[0]
	def TESTPROJECT = TESTPROJECTS[simpleTarget]
	return TESTPROJECT
}

def getJCK(){
	dir("$WORKSPACE/jck/"){
		def jck_suite = "runtime"
		def jck_version = "0"
		if (env.JCK_VERSION == "jck8b") {
			jck_version = "8b"
		} else if (env.JCK_VERSION == "jck9") {
			jck_version = "9"
		} else if (env.JCK_VERSION == "jck10") {
			jck_version = "10"
		} else {
			error_message =  "FAILED: JCK version ${env.JCK_VERSION} are not correctly defined \n"
			echo error_message
			currentBuild.result = 'FAILURE'
			error(error_message)
		}
		def server = Artifactory.server 'na.artifactory.swg-devops'
		def downloadSpec_JCK = """{
		"files": [
			{
			"pattern": "${JCK_MATERIAL_SERVER_ID}/jck-test/jck-src/${env.JCK_VERSION}/JCK-${jck_suite}-${jck_version}.zip",
			"target": "./"
			},
			{
			"pattern": "${JCK_MATERIAL_SERVER_ID}/jck-test/jck-src/${env.JCK_VERSION}/${env.JCK_VERSION}_configs.zip",
			"target": "./"
			}
		]
		}"""
		server.download(downloadSpec_JCK)
		sh """
			df -h
			mv ./jck-test/jck-src/${env.JCK_VERSION}/* ./
			ls ./
			echo "unzipping jck materials"
			unzip -o -q ./${env.JCK_VERSION}_configs.zip  -d ./${env.JCK_VERSION}/
			unzip -o -q ./JCK-${jck_suite}-${jck_version}.zip -d ./${env.JCK_VERSION}/
			echo "unzipping jck materials successfully"
			ls ./${env.JCK_VERSION}/JCK-${jck_suite}-${jck_version}/
			ls ./${env.JCK_VERSION}/
		"""
	}
}

def setup() {
	stage('Setup') {
		timestamps{
			env.JCL_VERSION = "current"
			env.JAVA_BIN = "$WORKSPACE/openjdkbinary/j2sdk-image/${(JAVA_VERSION == 'SE80') ? 'jre/' : ''}bin"
			env.JAVA_HOME = "${JAVA_BIN}/.."
			env.JAVA_VERSION = "${JAVA_VERSION}"
			env.JVM_VERSION = "${JVM_VERSION}"
			env.SPEC = "${SPEC}"
			env.BUILD_LIST = "${getBuildList()}"
			try{
				CUSTOMIZED_SDK_URL = "${CUSTOMIZED_SDK_URL}"
			} catch (MissingPropertyException e) {
				CUSTOMIZED_SDK_URL = ''
			}
			//download JCK test materials if BUILD_LIST is jck
			if (env.BUILD_LIST == "jck") {
				if ( fileExists ("$WORKSPACE/jck/") ) {
					dir("$WORKSPACE/jck/") {
						deleteDir()
					}
				}
				
				if ( JAVA_VERSION == "SE80" ) {
					env.JCK_VERSION = "jck8b"
				} else if ( JAVA_VERSION == "SE90" ) {
					env.JCK_VERSION = "jck9"
				} else if ( JAVA_VERSION == "SE100" ) {
					env.JCK_VERSION = "jck10"
				}
				echo "env.BUILD_LIST is jck, starting preparing JCK test materials."
				getJCK()
				env.JCK_ROOT = "$WORKSPACE/jck/"
				
			}
			
			if (JVM_VERSION.contains('openj9')) {
				JAVA_IMPL = 'openj9'
			} else if (JVM_VERSION.contains('sap')) {
				JAVA_IMPL = 'sap'
			} else {
				JAVA_IMPL = 'hotspot'
			}
			env.JAVA_IMPL= "${JAVA_IMPL}"
			if (env.BUILD_LIST == 'openjdk_regression' ||  env.BUILD_LIST == 'thirdparty_containers') {
				env.DIAGNOSTICLEVEL ='noDetails'
			}
			sh 'printenv'
			
			sh "chmod 755 ${WORKSPACE}/openjdk-tests/maketest.sh"
			sh "chmod 755 ${WORKSPACE}/openjdk-tests/get.sh"
			if (fileExists('openjdkbinary')) {
				dir('openjdkbinary') {
					deleteDir()
				}
			}
			if (fileExists('jvmtest')) {
				dir('jvmtest') {
					deleteDir()
				}
			}
			if (SDK_RESOURCE == 'upstream' && CUSTOMIZED_SDK_URL == '') {
				dir('openjdkbinary') {
					step([$class: 'CopyArtifact',
						fingerprintArtifacts: true,
						projectName: "$UPSTREAM_JOB_NAME",
						selector: upstream(allowUpstreamDependencies: false, fallbackToLastSuccessful: false, upstreamFilterStrategy: 'UseGlobalSetting')])
				}
			}
			sh "$WORKSPACE/openjdk-tests/get.sh -s $WORKSPACE -t $WORKSPACE/openjdk-tests -p $PLATFORM -v $JVM_VERSION -r $SDK_RESOURCE -c $CUSTOMIZED_SDK_URL"
			env.JCK_ROOT = "$WORKSPACE/jck/"
		}
	}
}

def buildTest() {
	stage('Build') {
		timestamps{
			sh 'printenv'
			echo 'Building tests...'
			if (JAVA_VERSION == 'SE80') {
				sh "chmod 755 ${JAVA_BIN}/java"
				sh "chmod 755 ${JAVA_BIN}/../../bin/javac"
				sh "chmod 755 ${JAVA_BIN}/../../bin/java"
			}
			sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests"
		}
	}
}

def runTest(subDir) {
	stage('Test') {
		timestamps{
			if (env.BUILD_LIST == "jck"){
				wrap([$class: 'Xvfb', autoDisplayName: true]) {
					def DISPLAY = sh (
						script: 'ps -f  | grep \'[X]vfb\' | awk \'{print \$9}\'',
						returnStdout: true
					).trim()
					env.DISPLAY = "${DISPLAY}"
					echo "env.DISPLAY is ${env.DISPLAY}"
					echo 'Running tests...'
					sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests/$subDir _$TARGET"
				}
			} else {
				echo 'Running tests...'
				sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests/$subDir _$TARGET"
			}
		}
	}
}

def post() {
	stage('Post') {
		timestamps{
			step([$class: "TapPublisher", testResults: "**/*.tap"])
			junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml'
			if (currentBuild.result == 'UNSTABLE') {
				archiveArtifacts artifacts: '**/*.tap', fingerprint: true, allowEmptyArchive: true
				archiveArtifacts artifacts: '**/work/**/*.jtr, **/junitreports/**/*.xml', fingerprint: true, allowEmptyArchive: true
				if (params.TARGET == 'system') {
					sh 'tar -zcf openjdk-systemtest-results.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*'
					archiveArtifacts artifacts: '**/openjdk-systemtest-results.tar.gz', fingerprint: true, allowEmptyArchive: true
				}
				if (env.BUILD_LIST == 'jck') {
					sh 'tar -zcf jck-test-results.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*'
					archiveArtifacts artifacts: '**/jck-test-results.tar.gz', fingerprint: true, allowEmptyArchive: true
				}
			}
			cleanWs cleanWhenFailure: false
		}
	}
}
def testBuild() {
	timeout(time: 6, unit: 'HOURS') {
		def isParallel = false;
		try {
			isParallel = IS_PARALLEL;
		} catch (MissingPropertyException e) {
			echo "IS_PARALLEL is not defined, set isParallel to false"
			isParallel = false
		}
		def BUILD_LIST = getBuildList()
		if ( isParallel == "true" ) {
			def testSubDirs = []
			def testSubDirSize = 0
			dir("$WORKSPACE/openjdk-tests/$BUILD_LIST") {
				testSubDirs = sh(returnStdout: true, script: "ls -d */").trim().split()
				testSubDirSize = testSubDirs.size()
			}
			echo "isParallel is $isParallel, testSubDirSize is $testSubDirSize, testSubDirs is $testSubDirs"
			def parallel_tests = [:]
			for (int i = 0; i < testSubDirSize; i++) {
				def testSubDir = testSubDirs[i].trim();
				parallel_tests[testSubDir] = {
					node ("$LABEL") {
						if ( fileExists ("$WORKSPACE/openjdk-tests") ) {
							dir("$WORKSPACE/openjdk-tests") {
								deleteDir()
							}
						}
						def git_url = "https://github.com/AdoptOpenJDK/openjdk-tests.git"
						def git_branch = "master"
						try {
							git_url = GIT_URL;
						} catch (MissingPropertyException e) {
							echo "GIT_URL is not defined, use default git_url"
						}
						try {
							git_branch = GIT_BRANCH;
						} catch (MissingPropertyException e) {
							echo "GIT_BRANCH is not defined, use default git_branch"
						}
						sh "git clone -b $git_branch --depth 1 $git_url"
						setup()
						buildTest()
						runTest("$BUILD_LIST/$testSubDir")
						post()
					}
				}
			}
			parallel parallel_tests
		} else {
			echo "isParallel is $isParallel, running test in default mode"
			setup()
			buildTest()
			runTest("$BUILD_LIST")
			post()
		}
	}
}
return this