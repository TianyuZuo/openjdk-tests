#!groovy
/* template jenkinsfile for adoptopenjdk test builds*/
def getBuildList() {
	def TESTPROJECTS = [system:'systemtest', perf:'performance', jck:'jck', external:'thirdparty_containers', openjdk:'openjdk_regression', jdk:'openjdk_regression', runtest:'', sanity:'', extended:'']
	String fullTarget="${TARGET}"
	String[] levelTargets = fullTarget.split('\\.')
	String groupTarget = levelTargets[-1]
	String[] partsTarget = groupTarget.split('_|-')
	String simpleTarget = partsTarget[0]
	def TESTPROJECT = TESTPROJECTS[simpleTarget]
	return TESTPROJECT
}

def archiveTestBinaries() {
	dir("$WORKSPACE") {
		sh "tar -zcf test-binaries.tar.gz ./openjdk-tests ./jvmtest ./openjdkbinary"
	}
	archiveArtifacts artifacts: '**/test-binaries.tar.gz', fingerprint: true, allowEmptyArchive: false
}

def stageTestBinaries() {
	sh "wget -q --no-check-certificate --header 'Cookie: allow-download=1' ${env.BUILD_URL}artifact/test-binaries.tar.gz " 
	sh "tar -xzf test-binaries.tar.gz"
	echo pwd()
	sh "ls"
}

def setupEnv() {
	env.JCL_VERSION = "current"
	env.JAVA_BIN = "$WORKSPACE/openjdkbinary/j2sdk-image/${(JAVA_VERSION == 'SE80') ? 'jre/' : ''}bin"
	env.JAVA_HOME = "${JAVA_BIN}/.."
	env.JAVA_VERSION = "${JAVA_VERSION}"
	env.JVM_VERSION = "${JVM_VERSION}"
	env.SPEC = "${SPEC}"
	env.BUILD_LIST = "${getBuildList()}"
	
	if (env.BUILD_LIST == "jck") {
		if ( JAVA_VERSION == "SE80" ) {
			env.JCK_VERSION = "jck8b"
		} else if ( JAVA_VERSION == "SE90" ) {
			env.JCK_VERSION = "jck9"
		} else if ( JAVA_VERSION == "SE100" ) {
			env.JCK_VERSION = "jck10"
		}
		env.JCK_ROOT = "$WORKSPACE/../jck_root"
		echo "env.JCK_ROOT is: ${env.JCK_ROOT}, env.JCK_VERSION is: ${env.JCK_VERSION}"
		if( params.JCK_GIT_REPO ) {
			env.JCK_GIT_REPO = params.JCK_GIT_REPO
			echo "env.JCK_GIT_REPO is $env.JCK_GIT_REPO"
		} else {
			echo "params.JCK_GIT_REPO was not defined"
		}
	}
	
	if (JVM_VERSION.contains('openj9')) {
		JAVA_IMPL = 'openj9'
	} else if (JVM_VERSION.contains('sap')) {
		JAVA_IMPL = 'sap'
	} else {
		JAVA_IMPL = 'hotspot'
	}
	env.JAVA_IMPL= "${JAVA_IMPL}"
	if (env.BUILD_LIST == 'openjdk_regression' ||  env.BUILD_LIST == 'thirdparty_containers') {
		env.DIAGNOSTICLEVEL ='noDetails'
	}
	sh 'printenv'
}

def setupParallelEnv() {
	stage('setupParallelEnv') {
		timestamps{
			cleanWs()
			setupEnv()
		}
	}
}

def setup() {
	stage('Setup') {
		timestamps{
			setupEnv()
			// get TestKitGen and test JDK for test
			try{
				CUSTOMIZED_SDK_URL = "${CUSTOMIZED_SDK_URL}"
			} catch (MissingPropertyException e) {
				CUSTOMIZED_SDK_URL = ''
			}
			sh "chmod 755 $WORKSPACE/openjdk-tests/maketest.sh"
			sh "chmod 755 $WORKSPACE/openjdk-tests/get.sh"
			if (fileExists('openjdkbinary')) {
				dir('openjdkbinary') {
					deleteDir()
				}
			}
			if (fileExists('jvmtest')) {
				dir('jvmtest') {
					deleteDir()
				}
			}
			if (SDK_RESOURCE == 'upstream' && CUSTOMIZED_SDK_URL == '') {
				dir('openjdkbinary') {
					step([$class: 'CopyArtifact',
						fingerprintArtifacts: true,
						projectName: "$UPSTREAM_JOB_NAME",
						selector: upstream(allowUpstreamDependencies: false, fallbackToLastSuccessful: false, upstreamFilterStrategy: 'UseGlobalSetting')])
				}
			}
			sh "$WORKSPACE/openjdk-tests/get.sh -s $WORKSPACE -t $WORKSPACE/openjdk-tests -p $PLATFORM -v $JVM_VERSION -r $SDK_RESOURCE -c $CUSTOMIZED_SDK_URL"
		}
	}
}

def buildTest() {
	stage('Build') {
		timestamps{
			echo 'Building tests...'
			if (JAVA_VERSION == 'SE80') {
				sh "chmod 755 ${JAVA_BIN}/java"
				sh "chmod 755 ${JAVA_BIN}/../../bin/javac"
				sh "chmod 755 ${JAVA_BIN}/../../bin/java"
			}
			if( params.JCK_GIT_REPO ) {
				sshagent (credentials: ["$params.SSH_AGENT_CREDENTIAL"]) {
					sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests"
				}
			} else {
				sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests"
			}
		}
	}
}

def runTest(subDir) {
	stage('Test') {
		timestamps{
			if (env.BUILD_LIST == "jck"){
				wrap([$class: 'Xvfb', autoDisplayName: true]) {
					def DISPLAY = sh (
						script: 'ps -f  | grep \'[X]vfb\' | awk \'{print \$9}\'',
						returnStdout: true
					).trim()
					env.DISPLAY = "${DISPLAY}"
					echo "env.DISPLAY is ${env.DISPLAY}"
					echo 'Running tests...'
					sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests/$subDir _$TARGET"
				}
			} else {
				echo 'Running tests...'
				sh "$WORKSPACE/openjdk-tests/maketest.sh $WORKSPACE/openjdk-tests/$subDir _$TARGET"
			}
		}
	}
}

def post() {
	stage('Post') {
		timestamps{
			step([$class: "TapPublisher", testResults: "**/*.tap"])
			junit allowEmptyResults: true, keepLongStdio: true, testResults: '**/work/**/*.jtr.xml, **/junitreports/**/*.xml'
			if (currentBuild.result == 'UNSTABLE') {
				archiveArtifacts artifacts: '**/*.tap', fingerprint: true, allowEmptyArchive: true
				archiveArtifacts artifacts: '**/work/**/*.jtr, **/junitreports/**/*.xml', fingerprint: true, allowEmptyArchive: true
				if (params.TARGET == 'system') {
					sh 'tar -zcf openjdk-systemtest-results.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*'
					archiveArtifacts artifacts: '**/openjdk-systemtest-results.tar.gz', fingerprint: true, allowEmptyArchive: true
				}
				if (env.BUILD_LIST == 'jck') {
					sh "tar -zcf jck-test-results$TEST_TARGET.tar.gz $WORKSPACE/openjdk-tests/TestConfig/test_output_*"
					archiveArtifacts artifacts: '**/jck-test-results$TEST_TARGET.tar.gz', fingerprint: true, allowEmptyArchive: true
				}
			}
			cleanWs cleanWhenFailure: false
			
		}
	}
}

def testBuild() {
	timeout(time: 6, unit: 'HOURS') {
		// prepare environment and compile test projects
		setup()
		buildTest()
		def build_list = getBuildList()
		if( params.IS_PARALLEL ){
			// archive compiled test binaries for parallel jobs
			archiveTestBinaries()
			def testSubDirs = []
			def testSubDirSize = 0
			dir("$WORKSPACE/openjdk-tests/$build_list") {
				testSubDirs = sh(returnStdout: true, script: "ls -d */").trim().split()
				testSubDirSize = testSubDirs.size()
			}
			echo "testSubDirSize is $testSubDirSize, testSubDirs is $testSubDirs, running test in parallel mode"
			def parallel_tests = [:]
			for (int i = 0; i < testSubDirSize; i++) {
				def testSubDir = testSubDirs[i].trim();
				parallel_tests[testSubDir] = {
					node ("$LABEL") {
						env.TEST_TARGET = "_$testSubDir"
						setupParallelEnv()
						stageTestBinaries()
						if( build_list == "jck") {
							buildTest()
						}
						runTest("$build_list/$testSubDir")
						post()
					}
				}
			}
			parallel parallel_tests
			cleanWs()
		} else {
			echo "running test in default mode"
			runTest("$build_list")
			post()
		}
		
	}
}
return this